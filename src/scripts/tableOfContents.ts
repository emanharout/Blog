// Select all sections within article containers. Each section starts at an article header 
// (inclusive) and includes all content until the next header (exclusive).
const articleSections = document.querySelectorAll<HTMLDivElement>(".article-content section");

const observer = new IntersectionObserver((entries) => {
  // Go through each entry (i.e. article section)
  entries.forEach((entry) => {

    // Grab the headings within the section (e.g. <h2>My Introduction</h2>)
    const heading = entry.target.querySelector<HTMLHeadingElement>("h2,h3");
    if (!heading) return;

    // Grab the heading's id, which is auto-generated by Astro. e.g., 'my-introduction'
    const id = heading.getAttribute("id");
    if (!id) return;

    // Grab the <a> element that has a class of 'table-of-content-link' and an href that is an anchor link to the
    // header.
    const link = document.querySelector<HTMLAnchorElement>(
      `.table-of-content-link[href="#${id}"]`,
    );
    if (!link) return;

    // `intersectionRatio` indicates how much of the section is visible. Zero means the element is not displayed at all.
    // Max value is 1, meaning the element is fully in view.
    const headerLinkIsVisible = entry.intersectionRatio > 0
    const activeHeaderLinkColors = [
      "text-fg-primary-link-2",
      "hover:text-fg-primary-link-2-hover",
      "focus:text-fg-primary-link-2-hover",
      "dark:hover:text-fg-primary-link-2-hover",
      "dark:focus:text-fg-primary-link-2-hover",
    ]
    // EH: id:ToC Default Link Color - We use the default inactive link color found below elsewhere.
    // If it changes, must update dependent component TableOfContentsHeading.astro
    const inactiveHeaderLinkColors = [
      "text-gray-temp-500",
      "hover:text-gray-temp-700",
      "focus:text-gray-temp-700",
      "dark:text-gray-temp-400",
      "dark:hover:text-gray-temp-300",
      "dark:focus:text-gray-temp-300",
    ]
    if (headerLinkIsVisible) {
        link.classList.add(...activeHeaderLinkColors);
        link.classList.remove(...inactiveHeaderLinkColors);
    } else {
        link.classList.remove(...activeHeaderLinkColors);
        link.classList.add(...inactiveHeaderLinkColors);
    }
  });
});

for (const section of articleSections) {
  observer.observe(section);
}

window.document.addEventListener("beforeunload", () => {
  observer.disconnect();
});