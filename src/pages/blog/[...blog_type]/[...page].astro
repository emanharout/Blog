---
import type { GetStaticPathsOptions, Page } from 'astro';
import type { CollectionEntry } from 'astro:content';
import BlogGrid from '../../../components/BlogGrid.astro';
import Hero from '../../../layouts/Hero.astro';
import MainLayout from '../../../layouts/MainLayout.astro';
import Pagination from '../../../components/Pagination.astro';
import TagList from '../../../components/TagList.astro';
import ProgrammingBlogHeader from '../../../components/ProgrammingBlogHeader.astro';
import WonderBlogHeader from '../../../components/WonderBlogHeader.astro';
import { getAllPostsSorted, isValidBlogType } from '../../../scripts/utilities.ts';
import { PaginationRepository } from '../../../scripts/pagination.ts';
import { PROGRAMMING_BLOG_TYPE, WONDER_BLOG_TYPE } from '../../../scripts/constants.ts';

// Was getting typescript errors because I was setting `blog_type` key to two types of values:
// string or undefined. Defining and using this new type resolves all warnings.
type BlogTypeParams =
    | { blog_type: string } // For valid blog types
    | { blog_type: undefined }; // For undefined

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
    // Define three routes, each corresponds to a view of the blog:
    // 1) /blog/programming 2) /blog/wonder 3) blog/ (shows both)
    // EH: TODO: See about removing undefined as a string literal and put actual undefined
    const blogTypeRoutes = [PROGRAMMING_BLOG_TYPE, WONDER_BLOG_TYPE, 'undefined'];
    const allPosts = await getAllPostsSorted();
    let blogsWithPosts = blogTypeRoutes.flatMap((blogTypeRoute) => {
        if (blogTypeRoute === 'undefined') {
            return paginate(allPosts, {
                params: { blog_type: undefined } as BlogTypeParams,
                pageSize: 12,
            });
        } else {
            const filteredPosts = allPosts.filter((post) => {
                return post.data.blog.includes(blogTypeRoute);
            });
            return paginate(filteredPosts, {
                params: { blog_type: blogTypeRoute } as BlogTypeParams,
                pageSize: 12,
            });
        }
    });
    return blogsWithPosts;
}

type Props = {
    page: Page;
};

const { page }: Props = Astro.props;
const paginationRepository = new PaginationRepository(page);
// For some reason Astro sometimes sets `Astro.params.blog_type` to be a page number since [...page] is also
// part of the path/route for [...blog_type], so we must check the blog type is not a page number before using it.
const blogType = Astro.params.blog_type;
const currentPageBlogPosts = page.data as CollectionEntry<'posts'>[];
const allBlogPosts = await getAllPostsSorted();
let filteredBlogPosts: CollectionEntry<'posts'>[];

let isWonderBlog = blogType == WONDER_BLOG_TYPE;
let isProgrammingBlog = blogType == PROGRAMMING_BLOG_TYPE;
if (blogType && isValidBlogType(blogType)) {
    filteredBlogPosts = allBlogPosts.filter((post) => post.data.blog.includes(blogType));
} else {
    filteredBlogPosts = allBlogPosts;
}
const allTags = filteredBlogPosts.flatMap((post) => post.data.tags);
const dedupedTags = Array.from(new Set(allTags));
const shouldShowTagList = dedupedTags.length > 0;
---

<MainLayout title="Blog" description="Explore Eman's blog posts.">
    {
        isWonderBlog && (
            <Hero heroTitle="Wonder Blog">
                <WonderBlogHeader />
            </Hero>
        )
    }
    {
        isProgrammingBlog && (
            <Hero heroTitle="Programming Blog">
                <ProgrammingBlogHeader />
            </Hero>
        )
    }
    <section class="mx-auto px-4
        max-w-screen-2xl">
        {
            shouldShowTagList && (
                <div class="flex justify-center">
                    <TagList tags={dedupedTags} />
                </div>
            )
        }
        <BlogGrid posts={currentPageBlogPosts} />
        <div class="mt-10">
            {paginationRepository.showPagination && <Pagination pageData={paginationRepository} />}
        </div>
    </section>
</MainLayout>
